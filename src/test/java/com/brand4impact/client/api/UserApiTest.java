/*
 * Total API Reference
 * Este contrato se usara para generar los clientes con todos los servicios necesarios.  `!Uso exclusivo interno!`               --- 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@brand4impact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.brand4impact.client.api;

import com.brand4impact.client.invoker.ApiException;
import com.brand4impact.client.model.PlatformUser;
import com.brand4impact.client.model.PlatformUserChangePassword;
import com.brand4impact.client.model.PlatformUserConfirm;
import com.brand4impact.client.model.PlatformUserInvite;
import com.brand4impact.client.model.PlatformUserItemWrapper;
import com.brand4impact.client.model.PlatformUserResetPassword;
import com.brand4impact.client.model.PlatformUserUpdate;
import com.brand4impact.client.model.PlatformUserUpdateExt;
import com.brand4impact.client.model.RestError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Change user&#39;s password
     *
     * This method updates the password of a specific user  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeUserPasswordTest() throws ApiException {
        String token = null;
        PlatformUserChangePassword user = null;
                PlatformUser response = api.changeUserPassword(token, user);
        // TODO: test validations
    }
    
    /**
     * Activate a user
     *
     * This method activate an invited user in the Company/NGO  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmUserTest() throws ApiException {
        String token = null;
        PlatformUserConfirm user = null;
                PlatformUser response = api.confirmUser(token, user);
        // TODO: test validations
    }
    
    /**
     * Get a single user
     *
     * This method returns a specific user within your tenant  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String token = null;
                PlatformUser response = api.getUser(token);
        // TODO: test validations
    }
    
    /**
     * Get a set of users
     *
     * This method returns a set of users within your tenant    [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)[![pagination](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/brackets.png &#39;pagination&#39;)](http://localhost:8080/backend/blog/home#pagination)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String firstnameLike = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
                PlatformUserItemWrapper response = api.getUsers(firstnameLike, page, size, sort);
        // TODO: test validations
    }
    
    /**
     * Invite a new user
     *
     * This method invites a user to join a Company/NGO  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inviteUserTest() throws ApiException {
        PlatformUserInvite user = null;
                PlatformUser response = api.inviteUser(user);
        // TODO: test validations
    }
    
    /**
     * Reset user&#39;s password
     *
     * This method reset the password of a specific user by sending an email to the user with a link to reset the password  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetUserPasswordTest() throws ApiException {
        PlatformUserResetPassword user = null;
                PlatformUser response = api.resetUserPassword(user);
        // TODO: test validations
    }
    
    /**
     * Switch user&#39;s status
     *
     * This method updates the user status, possible values are: active|inactive  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void switchUserTest() throws ApiException {
        String token = null;
                PlatformUser response = api.switchUser(token);
        // TODO: test validations
    }
    
    /**
     * Update user data
     *
     * This method updates personal data for a user  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String token = null;
        PlatformUserUpdate user = null;
                PlatformUser response = api.updateUser(token, user);
        // TODO: test validations
    }
    
    /**
     * Update sensitive user data
     *
     * This method updates sensitive user data  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserExtTest() throws ApiException {
        String token = null;
        PlatformUserUpdateExt user = null;
                PlatformUser response = api.updateUserExt(token, user);
        // TODO: test validations
    }
    
}
