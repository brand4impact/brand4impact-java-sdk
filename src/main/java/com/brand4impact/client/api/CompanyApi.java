/*
 * Total API Reference
 * Este contrato se usara para generar los clientes con todos los servicios necesarios.  `!Uso exclusivo interno!`               --- 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@brand4impact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.brand4impact.client.api;

import com.brand4impact.client.invoker.ApiCallback;
import com.brand4impact.client.invoker.ApiClient;
import com.brand4impact.client.invoker.ApiException;
import com.brand4impact.client.invoker.ApiResponse;
import com.brand4impact.client.invoker.Configuration;
import com.brand4impact.client.invoker.Pair;
import com.brand4impact.client.invoker.ProgressRequestBody;
import com.brand4impact.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.brand4impact.client.model.PlatformCompany;
import com.brand4impact.client.model.PlatformCompanyCreate;
import com.brand4impact.client.model.PlatformCompanyCreateAdmin;
import com.brand4impact.client.model.PlatformCompanyCreateLegal;
import com.brand4impact.client.model.PlatformCompanyUpdate;
import com.brand4impact.client.model.PlatformCompanyUpdateLegal;
import com.brand4impact.client.model.PlatformCompanyUpdateTopic;
import com.brand4impact.client.model.RestError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompanyApi {
    private ApiClient localVarApiClient;

    public CompanyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompanyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createCompany
     * @param company  (required)
     * @param legal  (required)
     * @param admin  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A summary of a new company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCompanyCall(PlatformCompanyCreate company, PlatformCompanyCreateLegal legal, PlatformCompanyCreateAdmin admin, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/platform/company";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (company != null) {
            localVarFormParams.put("company", company);
        }

        if (legal != null) {
            localVarFormParams.put("legal", legal);
        }

        if (admin != null) {
            localVarFormParams.put("admin", admin);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompanyValidateBeforeCall(PlatformCompanyCreate company, PlatformCompanyCreateLegal legal, PlatformCompanyCreateAdmin admin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'company' is set
        if (company == null) {
            throw new ApiException("Missing the required parameter 'company' when calling createCompany(Async)");
        }
        
        // verify the required parameter 'legal' is set
        if (legal == null) {
            throw new ApiException("Missing the required parameter 'legal' when calling createCompany(Async)");
        }
        
        // verify the required parameter 'admin' is set
        if (admin == null) {
            throw new ApiException("Missing the required parameter 'admin' when calling createCompany(Async)");
        }
        

        okhttp3.Call localVarCall = createCompanyCall(company, legal, admin, _callback);
        return localVarCall;

    }

    /**
     * Create a new Company
     * Register a new company allows you to start to have visibility that your deserves, being visible to brand4impact users and opting to donate among a bunch of projects
     * @param company  (required)
     * @param legal  (required)
     * @param admin  (required)
     * @return PlatformCompany
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A summary of a new company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public PlatformCompany createCompany(PlatformCompanyCreate company, PlatformCompanyCreateLegal legal, PlatformCompanyCreateAdmin admin) throws ApiException {
        ApiResponse<PlatformCompany> localVarResp = createCompanyWithHttpInfo(company, legal, admin);
        return localVarResp.getData();
    }

    /**
     * Create a new Company
     * Register a new company allows you to start to have visibility that your deserves, being visible to brand4impact users and opting to donate among a bunch of projects
     * @param company  (required)
     * @param legal  (required)
     * @param admin  (required)
     * @return ApiResponse&lt;PlatformCompany&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A summary of a new company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformCompany> createCompanyWithHttpInfo(PlatformCompanyCreate company, PlatformCompanyCreateLegal legal, PlatformCompanyCreateAdmin admin) throws ApiException {
        okhttp3.Call localVarCall = createCompanyValidateBeforeCall(company, legal, admin, null);
        Type localVarReturnType = new TypeToken<PlatformCompany>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Company (asynchronously)
     * Register a new company allows you to start to have visibility that your deserves, being visible to brand4impact users and opting to donate among a bunch of projects
     * @param company  (required)
     * @param legal  (required)
     * @param admin  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> A summary of a new company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCompanyAsync(PlatformCompanyCreate company, PlatformCompanyCreateLegal legal, PlatformCompanyCreateAdmin admin, final ApiCallback<PlatformCompany> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompanyValidateBeforeCall(company, legal, admin, _callback);
        Type localVarReturnType = new TypeToken<PlatformCompany>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompany
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompanyCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/platform/company";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuthentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCompanyCall(_callback);
        return localVarCall;

    }

    /**
     * Get your Company
     * This method returns the Company inside your tenant (theres no need to know the Company token)  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @return PlatformCompany
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public PlatformCompany getCompany() throws ApiException {
        ApiResponse<PlatformCompany> localVarResp = getCompanyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get your Company
     * This method returns the Company inside your tenant (theres no need to know the Company token)  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @return ApiResponse&lt;PlatformCompany&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformCompany> getCompanyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCompanyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PlatformCompany>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get your Company (asynchronously)
     * This method returns the Company inside your tenant (theres no need to know the Company token)  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompanyAsync(final ApiCallback<PlatformCompany> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PlatformCompany>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCompany
     * @param company  (required)
     * @param logo  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of an updated company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompanyCall(PlatformCompanyUpdate company, File logo, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/platform/company";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (company != null) {
            localVarFormParams.put("company", company);
        }

        if (logo != null) {
            localVarFormParams.put("logo", logo);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuthentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompanyValidateBeforeCall(PlatformCompanyUpdate company, File logo, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'company' is set
        if (company == null) {
            throw new ApiException("Missing the required parameter 'company' when calling updateCompany(Async)");
        }
        
        // verify the required parameter 'logo' is set
        if (logo == null) {
            throw new ApiException("Missing the required parameter 'logo' when calling updateCompany(Async)");
        }
        

        okhttp3.Call localVarCall = updateCompanyCall(company, logo, _callback);
        return localVarCall;

    }

    /**
     * Update Company data
     * This method updates any data for the Company  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param company  (required)
     * @param logo  (required)
     * @return PlatformCompany
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of an updated company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public PlatformCompany updateCompany(PlatformCompanyUpdate company, File logo) throws ApiException {
        ApiResponse<PlatformCompany> localVarResp = updateCompanyWithHttpInfo(company, logo);
        return localVarResp.getData();
    }

    /**
     * Update Company data
     * This method updates any data for the Company  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param company  (required)
     * @param logo  (required)
     * @return ApiResponse&lt;PlatformCompany&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of an updated company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformCompany> updateCompanyWithHttpInfo(PlatformCompanyUpdate company, File logo) throws ApiException {
        okhttp3.Call localVarCall = updateCompanyValidateBeforeCall(company, logo, null);
        Type localVarReturnType = new TypeToken<PlatformCompany>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Company data (asynchronously)
     * This method updates any data for the Company  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param company  (required)
     * @param logo  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of an updated company&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompanyAsync(PlatformCompanyUpdate company, File logo, final ApiCallback<PlatformCompany> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompanyValidateBeforeCall(company, logo, _callback);
        Type localVarReturnType = new TypeToken<PlatformCompany>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCompanyLegal
     * @param legal  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content, updated by legal settings </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompanyLegalCall(PlatformCompanyUpdateLegal legal, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/platform/company/legal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (legal != null) {
            localVarFormParams.put("legal", legal);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuthentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompanyLegalValidateBeforeCall(PlatformCompanyUpdateLegal legal, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'legal' is set
        if (legal == null) {
            throw new ApiException("Missing the required parameter 'legal' when calling updateCompanyLegal(Async)");
        }
        

        okhttp3.Call localVarCall = updateCompanyLegalCall(legal, _callback);
        return localVarCall;

    }

    /**
     * Update legal Company info
     * This method updates the legal info for your Company  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param legal  (required)
     * @return PlatformCompany
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content, updated by legal settings </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public PlatformCompany updateCompanyLegal(PlatformCompanyUpdateLegal legal) throws ApiException {
        ApiResponse<PlatformCompany> localVarResp = updateCompanyLegalWithHttpInfo(legal);
        return localVarResp.getData();
    }

    /**
     * Update legal Company info
     * This method updates the legal info for your Company  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param legal  (required)
     * @return ApiResponse&lt;PlatformCompany&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content, updated by legal settings </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformCompany> updateCompanyLegalWithHttpInfo(PlatformCompanyUpdateLegal legal) throws ApiException {
        okhttp3.Call localVarCall = updateCompanyLegalValidateBeforeCall(legal, null);
        Type localVarReturnType = new TypeToken<PlatformCompany>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update legal Company info (asynchronously)
     * This method updates the legal info for your Company  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param legal  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content, updated by legal settings </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompanyLegalAsync(PlatformCompanyUpdateLegal legal, final ApiCallback<PlatformCompany> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompanyLegalValidateBeforeCall(legal, _callback);
        Type localVarReturnType = new TypeToken<PlatformCompany>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCompanyTopic
     * @param sdg  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content, updated by topic </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompanyTopicCall(PlatformCompanyUpdateTopic sdg, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/platform/company/topic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sdg != null) {
            localVarFormParams.put("sdg", sdg);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuthentication" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompanyTopicValidateBeforeCall(PlatformCompanyUpdateTopic sdg, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sdg' is set
        if (sdg == null) {
            throw new ApiException("Missing the required parameter 'sdg' when calling updateCompanyTopic(Async)");
        }
        

        okhttp3.Call localVarCall = updateCompanyTopicCall(sdg, _callback);
        return localVarCall;

    }

    /**
     * Update selected topics for your Company
     * This method updates to which topics they can donate the vouchers of their campaigns  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param sdg  (required)
     * @return PlatformCompany
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content, updated by topic </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public PlatformCompany updateCompanyTopic(PlatformCompanyUpdateTopic sdg) throws ApiException {
        ApiResponse<PlatformCompany> localVarResp = updateCompanyTopicWithHttpInfo(sdg);
        return localVarResp.getData();
    }

    /**
     * Update selected topics for your Company
     * This method updates to which topics they can donate the vouchers of their campaigns  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param sdg  (required)
     * @return ApiResponse&lt;PlatformCompany&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content, updated by topic </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformCompany> updateCompanyTopicWithHttpInfo(PlatformCompanyUpdateTopic sdg) throws ApiException {
        okhttp3.Call localVarCall = updateCompanyTopicValidateBeforeCall(sdg, null);
        Type localVarReturnType = new TypeToken<PlatformCompany>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update selected topics for your Company (asynchronously)
     * This method updates to which topics they can donate the vouchers of their campaigns  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param sdg  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a company&#39;s settings and content, updated by topic </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompanyTopicAsync(PlatformCompanyUpdateTopic sdg, final ApiCallback<PlatformCompany> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompanyTopicValidateBeforeCall(sdg, _callback);
        Type localVarReturnType = new TypeToken<PlatformCompany>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
