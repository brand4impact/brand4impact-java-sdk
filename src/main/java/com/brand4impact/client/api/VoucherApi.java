/*
 * Total API Reference
 * Este contrato se usara para generar los clientes con todos los servicios necesarios.  `!Uso exclusivo interno!`               --- 
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@brand4impact.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.brand4impact.client.api;

import com.brand4impact.client.invoker.ApiCallback;
import com.brand4impact.client.invoker.ApiClient;
import com.brand4impact.client.invoker.ApiException;
import com.brand4impact.client.invoker.ApiResponse;
import com.brand4impact.client.invoker.Configuration;
import com.brand4impact.client.invoker.Pair;
import com.brand4impact.client.invoker.ProgressRequestBody;
import com.brand4impact.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.brand4impact.client.model.PlatformVoucher;
import com.brand4impact.client.model.PlatformVoucherItemWrapper;
import com.brand4impact.client.model.RestError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VoucherApi {
    private ApiClient localVarApiClient;

    public VoucherApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VoucherApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for downloadVoucherQr
     * @param token  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No a QR file </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A QR file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadVoucherQrCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/platform/voucher/{token}/qr"
            .replaceAll("\\{" + "token" + "\\}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuthentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadVoucherQrValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling downloadVoucherQr(Async)");
        }
        

        okhttp3.Call localVarCall = downloadVoucherQrCall(token, _callback);
        return localVarCall;

    }

    /**
     * Download the voucher QR image
     * This method returns a QR image of the voucher within your tenant to be able to access the donation graphically  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param token  (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No a QR file </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A QR file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public String downloadVoucherQr(String token) throws ApiException {
        ApiResponse<String> localVarResp = downloadVoucherQrWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Download the voucher QR image
     * This method returns a QR image of the voucher within your tenant to be able to access the donation graphically  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param token  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No a QR file </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A QR file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> downloadVoucherQrWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = downloadVoucherQrValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the voucher QR image (asynchronously)
     * This method returns a QR image of the voucher within your tenant to be able to access the donation graphically  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param token  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No a QR file </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A QR file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadVoucherQrAsync(String token, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadVoucherQrValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadVouchersFile
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No a link </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A link </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadVouchersFileCall(String campaignToken, String status, Integer min, Integer max, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/platform/voucher/campaign/{campaignToken}/file"
            .replaceAll("\\{" + "campaignToken" + "\\}", localVarApiClient.escapeString(campaignToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuthentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadVouchersFileValidateBeforeCall(String campaignToken, String status, Integer min, Integer max, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignToken' is set
        if (campaignToken == null) {
            throw new ApiException("Missing the required parameter 'campaignToken' when calling downloadVouchersFile(Async)");
        }
        

        okhttp3.Call localVarCall = downloadVouchersFileCall(campaignToken, status, min, max, _callback);
        return localVarCall;

    }

    /**
     * Download a set of voucher&#39;s links file
     * This method returns a set of voucher&#39;s links file within your tenant    [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)[![pagination](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/brackets.png &#39;pagination&#39;)](http://localhost:8080/backend/blog/home#pagination)
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No a link </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A link </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public String downloadVouchersFile(String campaignToken, String status, Integer min, Integer max) throws ApiException {
        ApiResponse<String> localVarResp = downloadVouchersFileWithHttpInfo(campaignToken, status, min, max);
        return localVarResp.getData();
    }

    /**
     * Download a set of voucher&#39;s links file
     * This method returns a set of voucher&#39;s links file within your tenant    [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)[![pagination](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/brackets.png &#39;pagination&#39;)](http://localhost:8080/backend/blog/home#pagination)
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No a link </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A link </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> downloadVouchersFileWithHttpInfo(String campaignToken, String status, Integer min, Integer max) throws ApiException {
        okhttp3.Call localVarCall = downloadVouchersFileValidateBeforeCall(campaignToken, status, min, max, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a set of voucher&#39;s links file (asynchronously)
     * This method returns a set of voucher&#39;s links file within your tenant    [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)[![pagination](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/brackets.png &#39;pagination&#39;)](http://localhost:8080/backend/blog/home#pagination)
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No a link </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A link </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadVouchersFileAsync(String campaignToken, String status, Integer min, Integer max, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadVouchersFileValidateBeforeCall(campaignToken, status, min, max, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadVouchersQr
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No a QR file </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A QR file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadVouchersQrCall(String campaignToken, String status, Integer min, Integer max, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/platform/voucher/campaign/{campaignToken}/qr"
            .replaceAll("\\{" + "campaignToken" + "\\}", localVarApiClient.escapeString(campaignToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuthentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadVouchersQrValidateBeforeCall(String campaignToken, String status, Integer min, Integer max, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignToken' is set
        if (campaignToken == null) {
            throw new ApiException("Missing the required parameter 'campaignToken' when calling downloadVouchersQr(Async)");
        }
        

        okhttp3.Call localVarCall = downloadVouchersQrCall(campaignToken, status, min, max, _callback);
        return localVarCall;

    }

    /**
     * Download a set of voucher QR images
     * This method returns a set of voucher QR images within your tenant    [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)[![pagination](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/brackets.png &#39;pagination&#39;)](http://localhost:8080/backend/blog/home#pagination)
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No a QR file </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A QR file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public String downloadVouchersQr(String campaignToken, String status, Integer min, Integer max) throws ApiException {
        ApiResponse<String> localVarResp = downloadVouchersQrWithHttpInfo(campaignToken, status, min, max);
        return localVarResp.getData();
    }

    /**
     * Download a set of voucher QR images
     * This method returns a set of voucher QR images within your tenant    [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)[![pagination](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/brackets.png &#39;pagination&#39;)](http://localhost:8080/backend/blog/home#pagination)
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No a QR file </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A QR file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> downloadVouchersQrWithHttpInfo(String campaignToken, String status, Integer min, Integer max) throws ApiException {
        okhttp3.Call localVarCall = downloadVouchersQrValidateBeforeCall(campaignToken, status, min, max, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a set of voucher QR images (asynchronously)
     * This method returns a set of voucher QR images within your tenant    [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)[![pagination](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/brackets.png &#39;pagination&#39;)](http://localhost:8080/backend/blog/home#pagination)
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No a QR file </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A QR file </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadVouchersQrAsync(String campaignToken, String status, Integer min, Integer max, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadVouchersQrValidateBeforeCall(campaignToken, status, min, max, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoucher
     * @param token  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a voucher&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVoucherCall(String token, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/platform/voucher/{token}"
            .replaceAll("\\{" + "token" + "\\}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuthentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoucherValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getVoucher(Async)");
        }
        

        okhttp3.Call localVarCall = getVoucherCall(token, _callback);
        return localVarCall;

    }

    /**
     * Get a single voucher
     * This method returns a specific voucher within your tenant  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param token  (required)
     * @return PlatformVoucher
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a voucher&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public PlatformVoucher getVoucher(String token) throws ApiException {
        ApiResponse<PlatformVoucher> localVarResp = getVoucherWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Get a single voucher
     * This method returns a specific voucher within your tenant  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param token  (required)
     * @return ApiResponse&lt;PlatformVoucher&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a voucher&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformVoucher> getVoucherWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = getVoucherValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<PlatformVoucher>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single voucher (asynchronously)
     * This method returns a specific voucher within your tenant  [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)
     * @param token  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A summary of a voucher&#39;s settings and content </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVoucherAsync(String token, final ApiCallback<PlatformVoucher> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoucherValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<PlatformVoucher>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVouchers
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @param page The number of the page. Possible values: 0 to unlimited (optional)
     * @param size The number of items inside a page. Possible values: 1 to 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A list of vouchers associated to a campaign </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVouchersCall(String campaignToken, String status, Integer min, Integer max, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/platform/voucher/campaign/{campaignToken}"
            .replaceAll("\\{" + "campaignToken" + "\\}", localVarApiClient.escapeString(campaignToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerAuthentication" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVouchersValidateBeforeCall(String campaignToken, String status, Integer min, Integer max, Integer page, Integer size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'campaignToken' is set
        if (campaignToken == null) {
            throw new ApiException("Missing the required parameter 'campaignToken' when calling getVouchers(Async)");
        }
        

        okhttp3.Call localVarCall = getVouchersCall(campaignToken, status, min, max, page, size, _callback);
        return localVarCall;

    }

    /**
     * Get a set of vouchers
     * This method returns a set of vouchers within your tenant    [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)[![pagination](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/brackets.png &#39;pagination&#39;)](http://localhost:8080/backend/blog/home#pagination)
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @param page The number of the page. Possible values: 0 to unlimited (optional)
     * @param size The number of items inside a page. Possible values: 1 to 100 (optional)
     * @return PlatformVoucherItemWrapper
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A list of vouchers associated to a campaign </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public PlatformVoucherItemWrapper getVouchers(String campaignToken, String status, Integer min, Integer max, Integer page, Integer size) throws ApiException {
        ApiResponse<PlatformVoucherItemWrapper> localVarResp = getVouchersWithHttpInfo(campaignToken, status, min, max, page, size);
        return localVarResp.getData();
    }

    /**
     * Get a set of vouchers
     * This method returns a set of vouchers within your tenant    [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)[![pagination](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/brackets.png &#39;pagination&#39;)](http://localhost:8080/backend/blog/home#pagination)
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @param page The number of the page. Possible values: 0 to unlimited (optional)
     * @param size The number of items inside a page. Possible values: 1 to 100 (optional)
     * @return ApiResponse&lt;PlatformVoucherItemWrapper&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A list of vouchers associated to a campaign </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PlatformVoucherItemWrapper> getVouchersWithHttpInfo(String campaignToken, String status, Integer min, Integer max, Integer page, Integer size) throws ApiException {
        okhttp3.Call localVarCall = getVouchersValidateBeforeCall(campaignToken, status, min, max, page, size, null);
        Type localVarReturnType = new TypeToken<PlatformVoucherItemWrapper>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a set of vouchers (asynchronously)
     * This method returns a set of vouchers within your tenant    [![security](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/shield-check.png &#39;security&#39;)](http://localhost:8080/backend/blog/home#seguridad)[![multi-tenant](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/users.png &#39;multi-tenant&#39;)](http://localhost:8080/backend/blog/home#multitenant)[![pagination](https://b4i.ams3.digitaloceanspaces.com/statics/swagger/brackets.png &#39;pagination&#39;)](http://localhost:8080/backend/blog/home#pagination)
     * @param campaignToken The unique token for the campaign. (required)
     * @param status The status of the voucher. Possible values: Active or Inactive (optional)
     * @param min Min value of the voucher (optional)
     * @param max Max value of the voucher (optional)
     * @param page The number of the page. Possible values: 0 to unlimited (optional)
     * @param size The number of items inside a page. Possible values: 1 to 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Validation exception </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Generic exception </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> A list of vouchers associated to a campaign </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVouchersAsync(String campaignToken, String status, Integer min, Integer max, Integer page, Integer size, final ApiCallback<PlatformVoucherItemWrapper> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVouchersValidateBeforeCall(campaignToken, status, min, max, page, size, _callback);
        Type localVarReturnType = new TypeToken<PlatformVoucherItemWrapper>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
